#!/usr/bin/python

"""
Simple plot viewer for my own accumulated data.
"""

import itertools
import pathlib
import json
from array import array
from sys import argv

from matplotlib import pyplot
from matplotlib.font_manager import FontProperties


abs_dir = pathlib.Path(__file__).absolute().parent
font = FontProperties(fname=abs_dir.joinpath("Font/NotoSansMonoCJKkr-Regular.otf"))


def calculate_delta(source) -> array:
    """
    Calculate possible viewer gain/lose from fluctuation of total view and live-viewers.

    :param source: Any sequence containing data over time.
    :return: int array for each approximate gain/lose of live viewers.
    """

    def view_diff_gen(source_):
        yield 0

        iterator = zip(source_, itertools.islice(source_, 1, None))

        for previous, current in iterator:
            yield current - previous

    # originally supplied data is unsigned long "L", but fluctuation won't be that huge.
    return array("l", view_diff_gen(source))


def plot_main(mapping):
    """
    Dirty main. Check this dirt out, it's extra dirty.
    Plots giving data.

    :param mapping: data satisfying structure generated by log_stat.py
    :return: None
    """

    title = mapping["stream_title"]
    interval = mapping["interval"]

    data = mapping["data"]
    gain_total = max(data["viewCount"]) - min(data["viewCount"])

    view_gain = calculate_delta(data["viewCount"])
    live_fluctuation = calculate_delta(data["concurrentViewers"])
    like_cast = calculate_delta(data["likeCount"])
    dislike_cast = calculate_delta(data["dislikeCount"])

    figure, axes = pyplot.subplots(3, 1, figsize=(16, 8))
    assert figure

    fig_manager = pyplot.get_current_fig_manager()
    fig_manager.set_window_title(f"Samples: {len(view_gain)} / "
                                 f"Duration: {len(view_gain) * interval / 60:0.2f}h / "
                                 f"Gain total: {gain_total}")

    # Plot 1
    axes[0].set_title(title, fontproperties=font)
    axes[0].plot(data["viewCount"], color='cornflowerblue', label="Total views")
    axes[0].plot(data["concurrentViewers"], color='orange', label="Live viewers")
    axes[0].plot(data["likeCount"], color='green', label="Upvote")
    axes[0].plot(data["dislikeCount"], color='red', label="Downvote")
    axes[0].legend()

    # determine min-max viewers
    max_val = max(data["viewCount"])
    axes[0].set_yticks(tuple(n for n in range(0, max_val + 1, max_val // 10)))

    # Plot 2
    axes[1].plot(view_gain, color="cornflowerblue", label="View increment")
    axes[1].plot(live_fluctuation, color="coral", label="Live delta")
    axes[1].legend()

    # Plot 3
    axes[2].plot(like_cast, color="green", label="Upvote casted")
    axes[2].plot(dislike_cast, color="red", label="Downvote casted")
    axes[2].legend()

    max_vote = max(itertools.chain(like_cast, dislike_cast))
    axes[2].set_yticks(tuple(n for n in range(0, max_vote + 1)))
    axes[2].set_xlabel(f"time({interval}sec unit)")

    pyplot.show()


if __name__ == '__main__':
    try:
        with open(argv[-1], encoding="utf8") as fp:
            loaded_data = json.load(fp)

    except FileNotFoundError:
        print(f"File {argv[-1]} does not exist.")

    else:
        plot_main(loaded_data)
